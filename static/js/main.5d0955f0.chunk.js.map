{"version":3,"sources":["Body.js","App.js","serviceWorker.js","reducer/inputreducer.js","reducer/addinputreducer.js","reducer/allReducer.js","index.js"],"names":["Body","state","text","this","props","todo","map","e","key","id","onClick","increment","className","disabled","value","decrement","editingmode","defaultValue","inputValue","onChange","event","setState","target","onSave","onEdit","remove","Component","connect","add","dispatch","type","App","date","Date","toLocaleDateString","curtime","setInterval","placeholder","handlechange","style","fontSize","input","reset","toLocaleTimeString","timedate","dispacth","now","editindmode","Boolean","window","location","hostname","match","inputreducers","action","addinputreducer","filter","list","index","findIndex","lists","indexes","c","emp","edit","forEach","l","data","save","datta","allreducers","combineReducers","inputReducer","addReducer","store","createStore","allreducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d0955f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass Body extends Component {\r\n  state = {\r\n    text: \"\",\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todo.map((e) => (\r\n          <div key={e.id}>\r\n            <button\r\n              onClick={() => this.props.increment(e.id)}\r\n              className=\"btn btn-primary btn-sm\"\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              disabled={!e.value}\r\n              onClick={() => this.props.decrement(e.id)}\r\n              className=\"btn btn-primary btn-sm\"\r\n            >\r\n              -\r\n            </button>\r\n            <span\r\n              className={\r\n                e.value === 0\r\n                  ? \"badge m-2 badge-warning\"\r\n                  : \"badge m-2 badge-primary\"\r\n              }\r\n            >\r\n              {\" \"}\r\n              Person {e.value === 0 ? \"Zero\" : e.value}\r\n            </span>\r\n            {e.editingmode === true ? (\r\n              <input\r\n                className=\"display-none\"\r\n                defaultValue={e.inputValue}\r\n                onChange={(event) =>\r\n                  this.setState({ text: event.target.value })\r\n                }\r\n              />\r\n            ) : (\r\n              <span>{e.inputValue}</span>\r\n            )}\r\n\r\n            {e.editingmode === true ? (\r\n              <button\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n                onClick={() => this.props.onSave(e.id, this.state.text)}\r\n              >\r\n                Save\r\n              </button>\r\n            ) : (\r\n              <button\r\n                onClick={() => this.props.onEdit(e.id)}\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n              >\r\n                Edit\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              onClick={() => this.props.remove(e.id)}\r\n              className=\"btn btn-danger btn-sm m-3\"\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return { todo: state.add };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    remove: (id) => {\r\n      dispatch({ type: \"DELETE\", id: id });\r\n    },\r\n    increment: (id) => {\r\n      dispatch({ type: \"INCREMENT\", id: id });\r\n    },\r\n    decrement: (id) => {\r\n      dispatch({ type: \"DECREMENT\", id: id });\r\n    },\r\n    onEdit: (id) => {\r\n      dispatch({ type: \"EDIT\", id: id });\r\n    },\r\n    onSave: (id, text) => {\r\n      dispatch({ type: \"SAVE\", id: id, text: text });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Body);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Body from \"./Body\";\nclass App extends Component {\n  state = {\n    date: new Date().toLocaleDateString(),\n    curtime: new Date(),\n  };\n  timedate() {\n    setInterval(() => {\n      this.setState({ curtime: new Date() });\n    }, 1000);\n  }\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-light bg-light\">\n          <label>Enter Task</label>\n          <input\n            type=\"input\"\n            placeholder=\"Enter task\"\n            onChange={(e) => {\n              this.props.handlechange(e.target);\n            }}\n          ></input>\n          <button\n            style={{ fontSize: 12 }}\n            className=\"btn btn-info btn-sm\"\n            onClick={() => {\n              this.props.add(this.props.input);\n            }}\n          >\n            Add Task\n          </button>\n          <button\n            style={{ fontSize: 12 }}\n            onClick={() => this.props.reset()}\n            className=\"btn btn-danger btn-sm\"\n          >\n            Reset number of people\n          </button>\n          <span className=\"btn btn-danger btn-sm\" style={{ fontSize: 12 }}>\n            {this.state.date} {this.state.curtime.toLocaleTimeString()}\n            {this.timedate()}\n          </span>\n        </nav>\n        <div>\n          <Body />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispacth) => {\n  return {\n    handlechange: (target) => {\n      dispacth({ type: \"SET_INPUT\", value: target.value });\n    },\n    add: (input) => {\n      let obj = {};\n\n      let inputValue = input;\n      let id = Date.now();\n      let editindmode = false;\n      let value = 0;\n      let text = \"\";\n      obj = { inputValue, id, editindmode, value, text };\n\n      dispacth({ type: \"ADD_INPUT\", value: obj });\n    },\n    reset: () => {\n      dispacth({ type: \"RESET\" });\n    },\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    input: state.input,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const inputreducers = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case \"SET_INPUT\":\r\n      return action.value;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default inputreducers;\r\n","const addinputreducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_INPUT\":\r\n      return (state = [...state, action.value]);\r\n    case \"DELETE\":\r\n      return state.filter((e) => e.id !== action.id);\r\n    case \"INCREMENT\":\r\n      const list = [...state];\r\n      const index = list.findIndex((e) => e.id === action.id);\r\n      if ((index) => 0) {\r\n        list[index].value++;\r\n        return list;\r\n      }\r\n      return list;\r\n\r\n    case \"DECREMENT\":\r\n      const lists = [...state];\r\n      const indexes = lists.findIndex((e) => e.id === action.id);\r\n      if ((index) => 0) {\r\n        lists[indexes].value--;\r\n        return lists;\r\n      }\r\n      return lists;\r\n    case \"RESET\":\r\n      const reset = state.map((c) => {\r\n        c.value = 0;\r\n        return c;\r\n      });\r\n      return reset;\r\n    case \"EMPTY\":\r\n      const emp = state.map((c) => {\r\n        c.inputValue = \"\";\r\n        return c;\r\n      });\r\n      return emp;\r\n\r\n    case \"EDIT\":\r\n      const edit = [...state];\r\n      edit.forEach((l) => {\r\n        if (l.id === action.id) {\r\n          l.editingmode = true;\r\n        }\r\n      });\r\n      const data = [...edit];\r\n      return data;\r\n    case \"SAVE\":\r\n      const save = [...state];\r\n\r\n      save.forEach((e) => {\r\n        if (e.id === action.id) {\r\n          e.editingmode = false;\r\n          e.inputValue = action.text;\r\n        }\r\n      });\r\n\r\n      const datta = [...save];\r\n      return datta;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default addinputreducer;\r\n\r\n// editvalue = (counter) => {\r\n//   const list = [...this.state.list];\r\n\r\n//   list.forEach((lists) => {\r\n//     if (lists.key === counter) {\r\n//       lists.editingmode = true;\r\n//     }\r\n//   });\r\n//   const data = [...list];\r\n//   this.setState({ list: data });\r\n// };\r\n// onsavetext = (key, text) => {\r\n//   const list = [...this.state.list];\r\n//   list.forEach((lists) => {\r\n//     if (lists.key === key) {\r\n//       lists.editingmode = false;\r\n//       lists.text = text;\r\n//     }\r\n//   });\r\n//   const data = [...list];\r\n//   this.setState({ list: data });\r\n// };\r\n","import inputReducer from \"./inputreducer\";\r\nimport addReducer from \"./addinputreducer\";\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allreducers = combineReducers({\r\n  input: inputReducer,\r\n  add: addReducer,\r\n});\r\n\r\nexport default allreducers;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { createStore } from \"redux\";\nimport allreducer from \"./reducer/allReducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  allreducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}